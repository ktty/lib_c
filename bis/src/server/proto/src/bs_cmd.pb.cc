// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bs_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bs_czl {
class BS_CMDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BS_CMD> {
} _BS_CMD_default_instance_;

namespace protobuf_bs_5fcmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BS_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(BS_CMD)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BS_CMD_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "bs_cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _BS_CMD_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BS_CMD_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014bs_cmd.proto\022\006bs_czl\"\371\003\n\006BS_CMD\"\356\003\n\tPr"
      "otoclID\022\013\n\007MSG_INI\020\000\022\020\n\013MSG_SET_REQ\020\201 \022\020"
      "\n\013MSG_SET_RSP\020\202 \022\026\n\021MSG_SET_BATCH_REQ\020\203 "
      "\022\026\n\021MSG_SET_BATCH_RSP\020\204 \022\026\n\021MSG_GET_SCOR"
      "E_REQ\020\205 \022\026\n\021MSG_GET_SCORE_RSP\020\206 \022\034\n\027MSG_"
      "GET_SCORE_BATCH_REQ\020\207 \022\034\n\027MSG_GET_SCORE_"
      "BATCH_RSP\020\210 \022\027\n\022MSG_RANK_QUERY_REQ\020\211 \022\027\n"
      "\022MSG_RANK_QUERY_RSP\020\220 \022\035\n\030MSG_RANK_BATCH"
      "_QUERY_REQ\020\221 \022\035\n\030MSG_RANK_BATCH_QUERY_RS"
      "P\020\222 \022\030\n\023MSG_RANGE_QUERY_REQ\020\223 \022\030\n\023MSG_RA"
      "NGE_QUERY_RSP\020\224 \022\037\n\032MSG_RANGEBYSCORE_QUE"
      "RY_REQ\020\225 \022\037\n\032MSG_RANGEBYSCORE_QUERY_RSP\020"
      "\226 \022\026\n\021MSG_TOP_QUERY_REQ\020\227 \022\026\n\021MSG_TOP_QU"
      "ERY_RSP\020\230 b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bs_cmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_bs_5fcmd_2eproto

const ::google::protobuf::EnumDescriptor* BS_CMD_ProtoclID_descriptor() {
  protobuf_bs_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bs_5fcmd_2eproto::file_level_enum_descriptors[0];
}
bool BS_CMD_ProtoclID_IsValid(int value) {
  switch (value) {
    case 0:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4112:
    case 4113:
    case 4114:
    case 4115:
    case 4116:
    case 4117:
    case 4118:
    case 4119:
    case 4120:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BS_CMD_ProtoclID BS_CMD::MSG_INI;
const BS_CMD_ProtoclID BS_CMD::MSG_SET_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_SET_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_SET_BATCH_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_SET_BATCH_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_GET_SCORE_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_GET_SCORE_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_GET_SCORE_BATCH_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_GET_SCORE_BATCH_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_RANK_QUERY_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_RANK_QUERY_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_RANK_BATCH_QUERY_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_RANK_BATCH_QUERY_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_RANGE_QUERY_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_RANGE_QUERY_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_RANGEBYSCORE_QUERY_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_RANGEBYSCORE_QUERY_RSP;
const BS_CMD_ProtoclID BS_CMD::MSG_TOP_QUERY_REQ;
const BS_CMD_ProtoclID BS_CMD::MSG_TOP_QUERY_RSP;
const BS_CMD_ProtoclID BS_CMD::ProtoclID_MIN;
const BS_CMD_ProtoclID BS_CMD::ProtoclID_MAX;
const int BS_CMD::ProtoclID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BS_CMD::BS_CMD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bs_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bs_czl.BS_CMD)
}
BS_CMD::BS_CMD(const BS_CMD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bs_czl.BS_CMD)
}

void BS_CMD::SharedCtor() {
  _cached_size_ = 0;
}

BS_CMD::~BS_CMD() {
  // @@protoc_insertion_point(destructor:bs_czl.BS_CMD)
  SharedDtor();
}

void BS_CMD::SharedDtor() {
}

void BS_CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BS_CMD::descriptor() {
  protobuf_bs_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bs_5fcmd_2eproto::file_level_metadata[0].descriptor;
}

const BS_CMD& BS_CMD::default_instance() {
  protobuf_bs_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

BS_CMD* BS_CMD::New(::google::protobuf::Arena* arena) const {
  BS_CMD* n = new BS_CMD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BS_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:bs_czl.BS_CMD)
}

bool BS_CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bs_czl.BS_CMD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:bs_czl.BS_CMD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bs_czl.BS_CMD)
  return false;
#undef DO_
}

void BS_CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bs_czl.BS_CMD)
  // @@protoc_insertion_point(serialize_end:bs_czl.BS_CMD)
}

::google::protobuf::uint8* BS_CMD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bs_czl.BS_CMD)
  // @@protoc_insertion_point(serialize_to_array_end:bs_czl.BS_CMD)
  return target;
}

size_t BS_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bs_czl.BS_CMD)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BS_CMD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bs_czl.BS_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  const BS_CMD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BS_CMD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bs_czl.BS_CMD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bs_czl.BS_CMD)
    MergeFrom(*source);
  }
}

void BS_CMD::MergeFrom(const BS_CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bs_czl.BS_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void BS_CMD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bs_czl.BS_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BS_CMD::CopyFrom(const BS_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bs_czl.BS_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BS_CMD::IsInitialized() const {
  return true;
}

void BS_CMD::Swap(BS_CMD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BS_CMD::InternalSwap(BS_CMD* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BS_CMD::GetMetadata() const {
  protobuf_bs_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bs_5fcmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BS_CMD

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bs_czl

// @@protoc_insertion_point(global_scope)
